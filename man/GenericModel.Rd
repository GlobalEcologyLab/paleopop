% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/GenericModel.R
\name{GenericModel}
\alias{GenericModel}
\title{R6 Class Representing a Generic Model.}
\description{
R6 class with generic (abstract) functionality for toolset models, including model
attribute get and set methods that resolve attribute scope (public, active, attached),
attribute aliases, attribute attachment, and error and warning message attributes.
}
\examples{
TestInheritedModel <-
  R6::R6Class("TestInheritedModel",
              inherit = GenericModel,
              public = list(model_attributes = c("attr1", "attr2"),
                            attr1 = NULL, attr2 = NULL),
              private = list(.model_attributes = c("attr3", "attr4"),
                             .active_attributes = c("attr3"),
                             .attr3 = NULL, .attr4 = NULL),
              active = list(attr3 = function(value) {
                              if (missing(value)) {
                                private$.attr3
                              } else {
                                private$.attr3 <- value
                              }
                            })
             )
params <- list(attr1 = 101, attr3 = c("a","b"), dog = array(7,3))
inherited_model <- TestInheritedModel$new(params = params,
                                          attr2 = 202,
                                          attr4 = c("c","d"),
                                          cat = array(9,3))
inherited_model
inherited_model$attached
inherited_model$get_attribute_names()
inherited_model$get_attributes()
inherited_model$get_attributes(c("attr2","attr4","cat"))
inherited_model$set_attributes(list(attr1 = 110, attr3 = c("x","y")),
                               attr2 = 220,
                               attr4 = c("w","x"),
                               dog = array(8,3),
                               horse = "fast",
                               warning_messages = "animals attached")
inherited_model
inherited_model$attached
inherited_model$attribute_aliases <- list(a1 = "attr1", c = "cat", warnings = "warning_messages")
inherited_model$get_attributes(c("a1", "c", "warnings"))
inherited_model$set_attributes(list(a1 = 111), c = array(3,3), warnings = c("new warning"))
inherited_model$get_attributes(c("a1", "c", "warnings"))
inherited_model$get_attributes()
inherited_model$warning_messages

}
\section{Super class}{
\code{\link[paleopop:GenericClass]{paleopop::GenericClass}} -> \code{GenericModel}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{model_attributes}}{A vector of public model attribute names - another stored as private.}

\item{\code{attached}}{A list of dynamically attached attributes (name-value pairs).}
}
\if{html}{\out{</div>}}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{attribute_aliases}}{A list of alternative alias names for model attributes (form: alias = "attribute") to be used with the set and get attributes methods.}

\item{\code{error_messages}}{A vector of error messages encountered when setting model attributes.}

\item{\code{warning_messages}}{A vector of warning messages encountered when setting model attributes.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{GenericModel$new()}}
\item \href{#method-new_clone}{\code{GenericModel$new_clone()}}
\item \href{#method-get_attribute_names}{\code{GenericModel$get_attribute_names()}}
\item \href{#method-get_attributes}{\code{GenericModel$get_attributes()}}
\item \href{#method-set_attributes}{\code{GenericModel$set_attributes()}}
\item \href{#method-get_attribute_aliases}{\code{GenericModel$get_attribute_aliases()}}
\item \href{#method-clone}{\code{GenericModel$clone()}}
}
}
\if{html}{
\out{<details open ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="paleopop" data-topic="GenericClass" data-id="read_from_rds">}\href{../../paleopop/html/GenericClass.html#method-read_from_rds}{\code{paleopop::GenericClass$read_from_rds()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="paleopop" data-topic="GenericClass" data-id="save_to_rds">}\href{../../paleopop/html/GenericClass.html#method-save_to_rds}{\code{paleopop::GenericClass$save_to_rds()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\subsection{Method \code{new()}}{
Initialization method sets given attributes individually and/or from a list.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GenericModel$new(attribute_aliases = NULL, params = list(), ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{attribute_aliases}}{A list of alternative alias names for model attributes (form: alias = "attribute") to be used with the set and get attributes methods.}

\item{\code{params}}{Parameters passed via a list.}

\item{\code{...}}{Parameters passed individually.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new_clone"></a>}}
\subsection{Method \code{new_clone()}}{
Creates a new (re-initialized) object of the current (inherited) object class with optionally passed parameters.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GenericModel$new_clone(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Parameters passed via the inherited class constructor (defined in initialize and run via new).}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
New object of the inherited class.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_attribute_names"></a>}}
\subsection{Method \code{get_attribute_names()}}{
Returns an array of all attribute names including public and private model attributes, as well as attached attributes, error and warning messages.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GenericModel$get_attribute_names()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Array of all attribute names.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_attributes"></a>}}
\subsection{Method \code{get_attributes()}}{
Returns a list of values for selected attributes or attribute aliases (when array of parameter names provided) or all attributes (when no params).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GenericModel$get_attributes(params = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{params}}{Array of attribute names to return (all when NULL).}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
List of selected or all attributes values.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set_attributes"></a>}}
\subsection{Method \code{set_attributes()}}{
Sets given attributes (optionally via alias names) individually and/or from a list.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GenericModel$set_attributes(params = list(), ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{params}}{List of parameters/attributes.}

\item{\code{...}}{Parameters/attributes passed individually.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_attribute_aliases"></a>}}
\subsection{Method \code{get_attribute_aliases()}}{
Returns an array of attribute names and aliases for specified or all attributes.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GenericModel$get_attribute_aliases(params = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{params}}{Array of attribute names for names/aliases to return (all when NULL).}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Array of selected or all attribute names and aliases.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GenericModel$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
