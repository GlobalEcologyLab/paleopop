% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/GenerativeModel.R
\name{GenerativeModel}
\alias{GenerativeModel}
\title{R6 Class Representing a Model for Dynamic Attribute Generation}
\description{
R6 class representing a model that dynamically generates attribute values
(\emph{outputs}) via reading data from files, or running assigned functions or
built-in functions (assigned as \emph{default} in inherited classes), using
simulation sample parameters (\emph{inputs}).
}
\section{Super classes}{
\code{\link[paleopop:GenericClass]{paleopop::GenericClass}} -> \code{\link[paleopop:GenericModel]{paleopop::GenericModel}} -> \code{GenerativeModel}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{generative_template}}{A nested object for model attributes that are maintained via shallow or \emph{new} cloning.}

\item{\code{generative_requirements}}{A list of attribute names and the template setting (\emph{"file"}, \emph{"function"}, or \emph{"default"}) that is required to generate their values.}

\item{\code{description}}{A brief description of what the generative model generates.}

\item{\code{inputs}}{An array of input attribute names for the generative model.}

\item{\code{outputs}}{An array of output attribute names for the generative model.}

\item{\code{file_templates}}{A nested list of file template attributes.}

\item{\code{function_templates}}{A nested list of function template attributes.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{GenerativeModel$new()}}
\item \href{#method-new_clone}{\code{GenerativeModel$new_clone()}}
\item \href{#method-generate}{\code{GenerativeModel$generate()}}
\item \href{#method-add_file_template}{\code{GenerativeModel$add_file_template()}}
\item \href{#method-add_function_template}{\code{GenerativeModel$add_function_template()}}
\item \href{#method-read_file}{\code{GenerativeModel$read_file()}}
\item \href{#method-run_function}{\code{GenerativeModel$run_function()}}
\item \href{#method-add_generative_requirements}{\code{GenerativeModel$add_generative_requirements()}}
\item \href{#method-generative_requirements_satisfied}{\code{GenerativeModel$generative_requirements_satisfied()}}
\item \href{#method-clone}{\code{GenerativeModel$clone()}}
}
}
\if{html}{
\out{<details ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="paleopop" data-topic="GenericClass" data-id="read_from_rds">}\href{../../paleopop/html/GenericClass.html#method-read_from_rds}{\code{paleopop::GenericClass$read_from_rds()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="paleopop" data-topic="GenericClass" data-id="save_to_rds">}\href{../../paleopop/html/GenericClass.html#method-save_to_rds}{\code{paleopop::GenericClass$save_to_rds()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="paleopop" data-topic="GenericModel" data-id="get_attribute_aliases">}\href{../../paleopop/html/GenericModel.html#method-get_attribute_aliases}{\code{paleopop::GenericModel$get_attribute_aliases()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="paleopop" data-topic="GenericModel" data-id="get_attribute_names">}\href{../../paleopop/html/GenericModel.html#method-get_attribute_names}{\code{paleopop::GenericModel$get_attribute_names()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="paleopop" data-topic="GenericModel" data-id="get_attributes">}\href{../../paleopop/html/GenericModel.html#method-get_attributes}{\code{paleopop::GenericModel$get_attributes()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="paleopop" data-topic="GenericModel" data-id="set_attributes">}\href{../../paleopop/html/GenericModel.html#method-set_attributes}{\code{paleopop::GenericModel$set_attributes()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\subsection{Method \code{new()}}{
Initialization method sets the generative template and requirements as well as any attributes passed via a \emph{params} list or individually.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GenerativeModel$new(
  generative_template = NULL,
  generative_requirements = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{generative_template}}{A \emph{GenerativeTemplate} or inherited class object containing the file and function templates utilized (facilitates shallow cloning).}

\item{\code{generative_requirements}}{A list of attribute names and the template setting ("file" or "function") that is required to generate their values.}

\item{\code{...}}{Parameters passed via a \emph{params} list or individually.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new_clone"></a>}}
\subsection{Method \code{new_clone()}}{
Creates a new (re-initialized) object of the current (inherited) object class with optionally passed parameters.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GenerativeModel$new_clone(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Parameters passed via the inherited class constructor (defined in initialize and run via new).}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
New object of the inherited class.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-generate"></a>}}
\subsection{Method \code{generate()}}{
Returns a list of generated output values (attributes) corresponding to the sample input values (attributes).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GenerativeModel$generate(input_values = list())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_values}}{List of sample input values for generative model attributes.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
List containing generated model output attributes and/or any error/warning messages.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-add_file_template"></a>}}
\subsection{Method \code{add_file_template()}}{
Adds a file template for reading RDS/CSV files for a given model attribute.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GenerativeModel$add_file_template(
  param,
  path_template,
  path_params = c(),
  file_type = "RDS"
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{param}}{Name of model attribute to be read from a file.}

\item{\code{path_template}}{Template string for the file path with \emph{\%s} placeholders (see \emph{sprintf}) for simulation sample parameters.}

\item{\code{path_params}}{Array of the names of the simulation sample parameters to be substituted (in order) into the path template.}

\item{\code{file_type}}{File type \emph{"RDS"} (default) or \emph{"CSV"} to be read.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-add_function_template"></a>}}
\subsection{Method \code{add_function_template()}}{
Adds a function template for running a function to calculate a given model attribute.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GenerativeModel$add_function_template(
  param,
  source_path,
  call_template,
  call_params = c()
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{param}}{Name of model attribute to be generated using a function.}

\item{\code{source_path}}{Path to the file containing the function definition.}

\item{\code{call_template}}{Template string for the function call with \emph{\%s} placeholders (see \emph{sprintf}) for simulation sample parameters.}

\item{\code{call_params}}{Array of the names of the simulation sample parameters to be substituted (in order) into the function call template.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-read_file"></a>}}
\subsection{Method \code{read_file()}}{
Reads and returns the value of a model attribute from a file using the corresponding file template and simulation sample parameters.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GenerativeModel$read_file(param)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{param}}{Name of model attribute to be read from the file.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Model attribute value read from a file.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-run_function"></a>}}
\subsection{Method \code{run_function()}}{
Returns the calculated value of a model attribute using the corresponding function template and simulation sample parameters.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GenerativeModel$run_function(param)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{param}}{Name of model attribute to be calculated using a function.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Model attribute value calculated using a function.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-add_generative_requirements"></a>}}
\subsection{Method \code{add_generative_requirements()}}{
Adds attribute names and the template setting (\emph{"file"} or \emph{"function"}) that is required to generate their values (via a \emph{params} list or individually).
Returns the calculated value of a model attribute using the corresponding function template and simulation sample parameters.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GenerativeModel$add_generative_requirements(params = list(), ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{params}}{Parameters passed via a list (e.g. \code{params = list(attr1 = "file", attr2 = "function")}).}

\item{\code{...}}{Parameters passed individually (e.g. \code{attr3 = "file"}).}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Returns message if problems encountered.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-generative_requirements_satisfied"></a>}}
\subsection{Method \code{generative_requirements_satisfied()}}{
Returns a boolean to indicate that all the file and/or function template settings that are required for attribute generation are present.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GenerativeModel$generative_requirements_satisfied()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Boolean to indicate that the required settings for attribute generation are present.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GenerativeModel$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
